#!/bin/bash
#
# Copyright (c) 2020 - 2021 Apple Inc. All rights reserved.
#
# @APPLE_LICENSE_HEADER_START@
#
# This file contains Original Code and/or Modifications of Original Code
# as defined in and that are subject to the Apple Public Source License
# Version 2.0 (the 'License'). You may not use this file except in
# compliance with the License. Please obtain a copy of the License at
# http://www.opensource.apple.com/apsl/ and read it before using this
# file.
#
# The Original Code and all software distributed under the License are
# distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
# INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
# Please see the License for the specific language governing rights and
# limitations under the License.
#
# @APPLE_LICENSE_HEADER_END@
#

#
# Access boot logs stored by UEFI-based firmware components.
#
# Finds and mounts the EFI System Partition and shows any logs stored
# there by the BootROM, boot.efi, etc.
#
# For usage, invoke with '-h'
#

SCRIPT=$(basename "$0")

# NOTE: This variable gets replaced with real data at build time
# automatically-generated build information:
_BUILD_INFO_BRIEF='efi-dump-logs 131~7312 (Official), built 2024-07-29T21:09:43-0700'

errmsg()
{
    echo "${SCRIPT}: error: $1" >&2
}

warnmsg()
{
    echo "${SCRIPT}: warning: $1" >&2
}

# $1    path to plist file
# $2    Plist entry spec to get
pl_get()
{
    /usr/libexec/PlistBuddy -c "Print $2" "$1"
}

# $1    path to plist file
# $2    Plist entry spec to test
pl_test()
{
    pl_get "$1" "$2" >/dev/null 2>&1
}

# $1    temp file for processing Plist data
# out   EFI System Partition's identifier (e.g., disk0s1)
find_esp_inner()
{
    local tmp="$1"

    local MAX_ITER=255 # backstop for infinite looping
    local outer
    local inner
    local content
    local diskid

    if ! diskutil list -plist internal physical > "$tmp" ; then
        errmsg 'Failed to list disks'
        return 1
    fi

    for (( i=0 ; i < $MAX_ITER ; i++ ))
    do
        outer=":AllDisksAndPartitions:$i"
        pl_test "$tmp" "$outer" || break

        for (( j=0 ; j < $MAX_ITER ; j++ ))
        do
            inner="${outer}:Partitions:$j"
            pl_test "$tmp" "$inner" || break

            if ! content=$(pl_get "$tmp" "${inner}:Content" ) ; then
                warnmsg "no 'Content' key ($i:$j)"
                continue
            fi

            if [ 'EFI' = "$content" ] ; then
                if diskid=$(pl_get "$tmp" "${inner}:DeviceIdentifier" ) ; then
                    echo "$diskid"
                    return 0
                else
                    errmsg 'Could not get DeviceIdentifier for EFI partition'
                    return 1
                fi
            fi
        done
    done

    errmsg 'Could not find EFI System Partition'
    return 1
}

# out   EFI System Partition's identifier (e.g., disk0s1)
find_esp()
{
    local tmp
    local err

    if ! tmp=$(mktemp) ; then
        errmsg 'Failed to make a temp file to hold diskutil output'
        return 1
    fi

    find_esp_inner "$tmp"
    err=$?

    rm "$tmp"
    return $err
}

# $1    EFI partition's identifier (e.g., disk0s1)
# $2    temp file for processing Plist data
# $3    desired mount point (if not yet mounted)
# ret   (see mount_esp for return codes)
# out   mount point (if ret 0 or 1)
mount_esp_inner()
{
    local diskid="$1"
    local tmp="$2"
    local requestedmount="$3"

    local existingmount
    local devicenode
    local prompt

    if ! diskutil info -plist "$diskid" > "$tmp" ; then
        errmsg 'Failed to get EFI partition info'
        return 2
    fi

    if existingmount=$(pl_get "$tmp" ':MountPoint' ) ; then
        if [ -n "$existingmount" ] ; then
            echo "$existingmount"
            return 1
        fi
    fi

    # This should simply resolve to "/dev/$diskid";
    # nevertheless, opting to query for it rather than hardcode
    if devicenode=$(pl_get "$tmp" ':DeviceNode') ; then
        if [ -z "$devicenode" ] ; then
            errmsg 'Failed getting DeviceNode of EFI partition'
            return 2
        fi
    fi

    if sudo --version > /dev/null 2>&1 ; then
        prompt='(trying to mount EFI partition)'$'\n''password:'
        if ! sudo -p "$prompt" mount -r -o nobrowse -t msdos "$devicenode" "$requestedmount" > /dev/null ; then
            errmsg "Failed to mount $devicenode at $requestedmount"
            return 2
        fi
    else
        if ! mount -r -o nobrowse -t msdos "$devicenode" "$requestedmount" > /dev/null ; then
            errmsg "Failed to mount $devicenode at $requestedmount"
            return 2
        fi
    fi

    echo "$requestedmount"
    return 0
}

# $1    EFI partition's identifier (e.g., disk0s1)
# ret   0 - Successfully mounted
# ret   1 - Was already mounted
# ret   2 - Failed to mount
# out   mount point (if ret 0 or 1)
mount_esp()
{
    local tmp
    local tmpmount
    local err

    if ! tmp=$(mktemp) ; then
        errmsg 'Failed to make a temp file to hold diskutil output'
        return 2
    fi

    if ! tmpmount=$(mktemp -d) ; then
        rm "$tmp"
        return 2
    fi

    mount_esp_inner "$1" "$tmp" "$tmpmount"
    err=$?

    rm "$tmp"
    if [ $err -eq 1 ] ; then
        rmdir "$tmpmount"
    fi

    return $err
}

# $1    EFI partition mount point
# $2    print_headers
#       1 - display headers and footers
#       0 - suppress instead
# out   log contents, with optional headers and footers
dump_esp_logs_inner()
{
    local mountpoint="$1"
    local print_headers="$2"

    local logdir="${mountpoint}/EFI/APPLE/LOG"

    local fname
    local fnamedisp

    if ! stat "$logdir" > /dev/null 2>&1 ; then
        return 0
    fi

    while read -d $'\0' fname
    do
        fnamedisp="<EFI System Partition>:${fname#$mountpoint}"

        if [ $print_headers -eq 1 ] ; then
            echo '/====================================================================='
            echo "| Begin $fnamedisp"
            echo '+---------------------------------------------------------------------'
        fi

        cat "$fname"

        if [ $print_headers -eq 1 ] ; then
            echo "+---------------------------------------------------------------------"
            echo "| End $fnamedisp"
            echo '\====================================================================='
        fi

    done < <(find "$logdir" -type f -name 'BOOT-*.LOG' -print0 | sort -zr)

    return 0
}

# $1    print_headers
#       1 - display headers and footers
#       0 - suppress instead
# out   log contents, with optional headers and footers
dump_esp_logs()
{
    local print_headers="$1"

    local diskid
    local esp_path
    local mount_ret
    local scrape_ret

    if ! diskid=$(find_esp) ; then
        return 1
    fi

    esp_path=$(mount_esp "$diskid" ) ; mount_ret=$?

    if [ $mount_ret -eq 2 ] ; then
        errmsg 'failed to mount EFI partition'
        return 1
    fi

    dump_esp_logs_inner "$esp_path" "$print_headers" ; scrape_ret=$?

    if [ $mount_ret -eq 0 ] ; then
        # It was not mounted when we were invoked, so clean up
        if diskutil unmount "$esp_path" > /dev/null ; then
            rmdir "$esp_path"
        fi
    fi

    if [ $scrape_ret -ne 0 ] ; then
        return 1
    else
        return 0
    fi
}

# $1    print_headers
#       1 - display headers and footers
#       0 - suppress instead
# out   log contents, with optional headers and footers
scrape_logs()
{
    local print_headers="$1"

    if ! dump_esp_logs "$print_headers" ; then
        return 1
    fi

    return 0
}

# $1    full
#       1 - print full usage
#       0 - print abbreviated usage
# out   usage information
print_usage()
{
    local full="$1"

    echo "usage: $SCRIPT [-h] [-V] [-c <bytes>] [-r]"

    if [ $full -eq 1 ] ; then
        echo ""
        echo "  options:"
        echo "    -h          Display this help message"
        echo "    -V          Display version and exit"
        echo "    -c <bytes>  Maximum total bytes of output"
        echo "    -r          Print the raw log contents without any"
        echo "                surrounding header or footer text"
    fi
    return 0
}

main()
{
    local opt
    local bytes=-1
    local print_headers=1

    while getopts ":hVc:r" opt; do
        case ${opt} in
            h )
                print_usage 1
                exit 0
                ;;
            V )
                printf '%s\n' "$_BUILD_INFO_BRIEF"
                exit 0
                ;;
            c )
                if [ $(($OPTARG)) != $OPTARG -o $OPTARG -lt 0 ] ; then
                    print_usage 0 >&2
                    errmsg "bad argument for -${opt}: $OPTARG"
                    exit 1
                fi
                bytes=$OPTARG
                ;;
            r )
                print_headers=0
                ;;
            \? )
                print_usage 0 >&2
                errmsg "unknown option: -$OPTARG"
                exit 1
                ;;
            : )
                print_usage 0 >&2
                errmsg "option -$OPTARG takes one argument"
                exit 1
                ;;
        esac
    done

    shift $((OPTIND -1))
    if [ "$1" != "" ] ; then
        print_usage 0 >&2
        errmsg 'too many arguments'
        exit 1
    fi


    local err=0
    local tmp

    if [ $bytes -gt 0 ] ; then
        if ! tmp=$(mktemp -q) ; then
            errmsg 'failed to create temp file to stage result'
            exit 1
        fi

        scrape_logs "$print_headers" > "$tmp" ; err=$?
        if [ $err -eq 0 ] ; then
            tail -c "$bytes" "$tmp" ; err=$?
            if [ $err -ne 0 ] ; then
                errmsg 'failed printing prepared result'
            fi
        fi

        rm "$tmp"
    else
        scrape_logs "$print_headers" ; err=$?
    fi

    if [ $err -ne 0 ] ; then
        exit 1
    else
        exit 0
    fi
}

main "$@"
